MODULE main
VAR
	active  		: boolean;
	redMovable		: boolean;
	blackMovable	: boolean;
	redPos   		: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
	blackPos 		: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
	redPosOld		: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
	blackPosOld		: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
	routeAvailable  : array 0..15 of boolean;
	game			: {playing, finished};

ASSIGN
	init(active) := {TRUE, FALSE};
	init(redMovable) := TRUE;
	init(blackMovable) := TRUE;
	init(redPos)  := 5;
	init(blackPos) := 2;
	init(game) := playing;
	init(redPosOld) := 5;
	init(blackPosOld) := 2;

	init(routeAvailable[0]) := TRUE;
	init(routeAvailable[1]) := TRUE;
	init(routeAvailable[2]) := TRUE;
	init(routeAvailable[3]) := TRUE;
	init(routeAvailable[4]) := TRUE;
	init(routeAvailable[5]) := TRUE;
	init(routeAvailable[6]) := TRUE;
	init(routeAvailable[7]) := TRUE;
	init(routeAvailable[8]) := TRUE;
	init(routeAvailable[9]) := TRUE;
	init(routeAvailable[10]) := TRUE;
	init(routeAvailable[11]) := TRUE;
	init(routeAvailable[12]) := TRUE;
	init(routeAvailable[13]) := TRUE;
	init(routeAvailable[14]) := TRUE;
	init(routeAvailable[15]) := TRUE;

	next(redPosOld) := redPos;
	next(blackPosOld) := blackPos;

	next(redPos) := 

	case
		redPos = 1  & redMovable & active  	: { 2, 5, 6};
		redPos = 2  & redMovable & active	: { 1, 3, 7};
		redPos = 3  & redMovable & active	: { 2, 4, 8};
		redPos = 4  & redMovable & active	: { 3, 5, 9};
		redPos = 5  & redMovable & active	: { 1, 4, 10};
		redPos = 6  & redMovable & active	: { 1, 8, 9};
		redPos = 7  & redMovable & active	: { 2, 9, 10};
		redPos = 8  & redMovable & active	: { 3, 6, 10};
		redPos = 9  & redMovable & active	: { 4, 6, 7};
		redPos = 10 & redMovable & active	: { 5, 7, 8};
		TRUE : redPos;
	esac;

	next(blackPos) := case
		blackPos = 1  & blackMovable & !active: { 2, 5, 6};
		blackPos = 2  & blackMovable & !active: { 1, 3, 7};
		blackPos = 3  & blackMovable & !active: { 2, 4, 8};
		blackPos = 4  & blackMovable & !active: { 3, 5, 9};
		blackPos = 5  & blackMovable & !active: { 1, 4, 10};
		blackPos = 6  & blackMovable & !active: { 1, 8, 9};
		blackPos = 7  & blackMovable & !active: { 2, 9, 10};
		blackPos = 8  & blackMovable & !active: { 3, 6, 10};
		blackPos = 9  & blackMovable & !active: { 4, 6, 7};
		blackPos = 10 & blackMovable & !active: { 5, 7, 8};
		TRUE : blackPos;
	esac;

	next(blackPos != blackPosOld)

	next(game) := case
		redMovable = FALSE | blackMovable = FALSE : finished;
		TRUE : playing;
	esac;

TRANS
	next(active) = !active;
